{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware}from\"redux\";import thunk from\"redux-thunk\";import{composeWithDevTools}from\"redux-devtools-extension\";import{itemListReducer,listDetailReducer}from\"./reducers/itemReducers\";import{cartReducer}from\"./reducers/cartReducers\";import{userLoginReducer,userRegisterReducer,userProfileReducer,updateProfileReducer,deleteProfileReducer,forgotPasswordReducer,getAllUsersReducer,updateUserReducer,deleteUserReducer,sendPasswordResetReducer,addNewUserReducer}from\"./reducers/userReducers\";var reducer=combineReducers({itemList:itemListReducer,itemDetail:listDetailReducer,cart:cartReducer,userLogin:userLoginReducer,userRegister:userRegisterReducer,userProfile:userProfileReducer,updateProfile:updateProfileReducer,deleteProfile:deleteProfileReducer,forgotPassword:forgotPasswordReducer,//ADMIN PANEL\ngetAllUsers:getAllUsersReducer,updateUser:updateUserReducer,deleteUser:deleteUserReducer,sendPasswordReset:sendPasswordResetReducer,addNewUser:addNewUserReducer});//cart functionality\n/*if cart items is existing, convert to object format else return\r\nan empty array*/var cartItemsFromStorage=localStorage.getItem(\"cartItems\")?JSON.parse(localStorage.getItem(\"cartItems\")):[];var userInfoFromStorage=localStorage.getItem(\"userInfo\")?JSON.parse(localStorage.getItem(\"userInfo\")):null;//I think localStorage is for saving the item then pass in the store state\n//define initial state that are coming from Storage\nvar initialState={cart:{cartItems:cartItemsFromStorage},userLogin:{userInfo:userInfoFromStorage}};//we could log our actions into redux devtools before redux passes continous\nvar middleware=[thunk];var store=createStore(reducer,initialState,//wrap the data from the devtools to pass the data from the middleware to devtools\ncomposeWithDevTools(applyMiddleware.apply(void 0,middleware)));export default store;","map":{"version":3,"sources":["C:/Github Repositories/cyclex/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","itemListReducer","listDetailReducer","cartReducer","userLoginReducer","userRegisterReducer","userProfileReducer","updateProfileReducer","deleteProfileReducer","forgotPasswordReducer","getAllUsersReducer","updateUserReducer","deleteUserReducer","sendPasswordResetReducer","addNewUserReducer","reducer","itemList","itemDetail","cart","userLogin","userRegister","userProfile","updateProfile","deleteProfile","forgotPassword","getAllUsers","updateUser","deleteUser","sendPasswordReset","addNewUser","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","cartItems","userInfo","middleware","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,eAAvC,KAA6D,OAA7D,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,OAASC,eAAT,CAA0BC,iBAA1B,KAAmD,yBAAnD,CACA,OAASC,WAAT,KAA4B,yBAA5B,CACA,OAASC,gBAAT,CAA2BC,mBAA3B,CAAgDC,kBAAhD,CAAoEC,oBAApE,CACIC,oBADJ,CAC0BC,qBAD1B,CACiDC,kBADjD,CACqEC,iBADrE,CAEIC,iBAFJ,CAEuBC,wBAFvB,CAEiDC,iBAFjD,KAE0E,yBAF1E,CAIA,GAAMC,CAAAA,OAAO,CAAGlB,eAAe,CAAC,CAC5BmB,QAAQ,CAAEf,eADkB,CAE5BgB,UAAU,CAAEf,iBAFgB,CAG5BgB,IAAI,CAAEf,WAHsB,CAI5BgB,SAAS,CAAEf,gBAJiB,CAK5BgB,YAAY,CAAEf,mBALc,CAM5BgB,WAAW,CAAEf,kBANe,CAO5BgB,aAAa,CAAEf,oBAPa,CAQ5BgB,aAAa,CAAEf,oBARa,CAS5BgB,cAAc,CAAEf,qBATY,CAU5B;AACAgB,WAAW,CAAEf,kBAXe,CAY5BgB,UAAU,CAAEf,iBAZgB,CAa5BgB,UAAU,CAAEf,iBAbgB,CAc5BgB,iBAAiB,CAAEf,wBAdS,CAe5BgB,UAAU,CAAEf,iBAfgB,CAAD,CAA/B,CAkBA;AACA;AACA,gBACA,GAAMgB,CAAAA,oBAAoB,CAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,EACvBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADuB,CAEzB,EAFJ,CAIA,GAAMG,CAAAA,mBAAmB,CAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,EACtBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADsB,CACwB,IADpD,CAGA;AACA;AACA,GAAMI,CAAAA,YAAY,CAAG,CACjBlB,IAAI,CAAE,CAAEmB,SAAS,CAAEP,oBAAb,CADW,CAEjBX,SAAS,CAAE,CAAEmB,QAAQ,CAAEH,mBAAZ,CAFM,CAArB,CAIA;AACA,GAAMI,CAAAA,UAAU,CAAG,CAACxC,KAAD,CAAnB,CACA,GAAMyC,CAAAA,KAAK,CAAG5C,WAAW,CACrBmB,OADqB,CAErBqB,YAFqB,CAGrB;AACApC,mBAAmB,CAACF,eAAe,MAAf,QAAmByC,UAAnB,CAAD,CAJE,CAAzB,CAOA,cAAeC,CAAAA,KAAf","sourcesContent":["import  {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { itemListReducer, listDetailReducer } from \"./reducers/itemReducers\";\r\nimport { cartReducer } from \"./reducers/cartReducers\";\r\nimport { userLoginReducer, userRegisterReducer, userProfileReducer, updateProfileReducer, \r\n    deleteProfileReducer, forgotPasswordReducer, getAllUsersReducer, updateUserReducer,\r\n    deleteUserReducer, sendPasswordResetReducer, addNewUserReducer } from \"./reducers/userReducers\";\r\n\r\nconst reducer = combineReducers({\r\n    itemList: itemListReducer,\r\n    itemDetail: listDetailReducer,\r\n    cart: cartReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userProfile: userProfileReducer,\r\n    updateProfile: updateProfileReducer,\r\n    deleteProfile: deleteProfileReducer,\r\n    forgotPassword: forgotPasswordReducer,\r\n    //ADMIN PANEL\r\n    getAllUsers: getAllUsersReducer,\r\n    updateUser: updateUserReducer,\r\n    deleteUser: deleteUserReducer,\r\n    sendPasswordReset: sendPasswordResetReducer,\r\n    addNewUser: addNewUserReducer\r\n});\r\n\r\n//cart functionality\r\n/*if cart items is existing, convert to object format else return\r\nan empty array*/ \r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n    ? JSON.parse(localStorage.getItem(\"cartItems\")) :\r\n    [];\r\n\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n    ? JSON.parse(localStorage.getItem(\"userInfo\")): null;\r\n\r\n//I think localStorage is for saving the item then pass in the store state\r\n//define initial state that are coming from Storage\r\nconst initialState = {\r\n    cart: { cartItems: cartItemsFromStorage },\r\n    userLogin: { userInfo: userInfoFromStorage}\r\n};\r\n//we could log our actions into redux devtools before redux passes continous\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    //wrap the data from the devtools to pass the data from the middleware to devtools\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n\r\n"]},"metadata":{},"sourceType":"module"}