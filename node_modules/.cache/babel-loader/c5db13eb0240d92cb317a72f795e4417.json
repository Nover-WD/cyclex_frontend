{"ast":null,"code":"import axios from \"axios\";\nimport { CART_APPEND_ITEM, CART_REQUEST_SUCCESS, CART_REMOVE_ITEM, REMOVE_ITEMS_SUCCESS } from \"../constants/cartConstants\";\nimport { CART_API_URL, ITEM_API_URL } from \"../constants/apiConstants\";\nconst serverUrl = \"https://cyclexbackend.adaptable.app\";\nexport const addToCart = (id, qty, userId) => async (dispatch, getState) => {\n  //get the specific item on server\n  const {\n    data\n  } = await axios({\n    method: \"get\",\n    url: serverUrl + ITEM_API_URL + `/${id}`\n  }); //send the specific item to cartItems(server)\n\n  const cartItem = await axios({\n    method: \"POST\",\n    url: serverUrl + CART_API_URL + \"/\",\n    data: {\n      userId,\n      itemId: data._id,\n      name: data.name,\n      brand: data.brand,\n      image: data.image,\n      price: data.price,\n      qty,\n      countInStock: data.countInStock\n    }\n  }).catch(err => console.log(err.message)); //get from server the cartItem data and sent it to reducer\n\n  dispatch({\n    type: CART_APPEND_ITEM,\n    payload: cartItem.data\n  }); //refresh the localstorage\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n}; //Create another action when the user logged in it will get all the user cart items\n\nexport const requestCartItems = userId => async (dispatch, getState) => {\n  const {\n    data\n  } = await axios({\n    method: \"GET\",\n    url: serverUrl + CART_API_URL + `/user-cart-items/${userId}`\n  });\n  dispatch({\n    type: CART_REQUEST_SUCCESS,\n    payload: data\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n};\nexport const removeFromCart = id => async (dispatch, getState) => {\n  //remove from db\n  await axios({\n    method: \"DELETE\",\n    url: serverUrl + CART_API_URL + \"/remove\",\n    data: {\n      cartId: id\n    }\n  }); //remove in redux state\n\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: id\n  }); //refresh the localstorage\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n};\nexport const removeCartItems = () => async dispatch => {\n  dispatch({\n    type: REMOVE_ITEMS_SUCCESS\n  });\n};","map":{"version":3,"sources":["C:/Github Repositories/deploy-cyclex/src/actions/cartActions.js"],"names":["axios","CART_APPEND_ITEM","CART_REQUEST_SUCCESS","CART_REMOVE_ITEM","REMOVE_ITEMS_SUCCESS","CART_API_URL","ITEM_API_URL","serverUrl","addToCart","id","qty","userId","dispatch","getState","data","method","url","cartItem","itemId","_id","name","brand","image","price","countInStock","catch","err","console","log","message","type","payload","localStorage","setItem","JSON","stringify","cart","cartItems","requestCartItems","removeFromCart","cartId","removeCartItems"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { CART_APPEND_ITEM, CART_REQUEST_SUCCESS, CART_REMOVE_ITEM, REMOVE_ITEMS_SUCCESS } from \"../constants/cartConstants\";\r\nimport { CART_API_URL, ITEM_API_URL } from \"../constants/apiConstants\";\r\n\r\nconst serverUrl = \"https://cyclexbackend.adaptable.app\";\r\n\r\nexport const addToCart = (id, qty, userId) => async(dispatch, getState) => {\r\n    \r\n    //get the specific item on server\r\n    const {data} = await axios({\r\n        method: \"get\",\r\n        url: serverUrl + ITEM_API_URL + `/${id}` \r\n    });\r\n\r\n    //send the specific item to cartItems(server)\r\n    const cartItem = await axios({\r\n        method: \"POST\",\r\n        url: serverUrl + CART_API_URL + \"/\",\r\n        data: {\r\n            userId,\r\n            itemId: data._id,\r\n            name: data.name,\r\n            brand: data.brand,\r\n            image: data.image,\r\n            price: data.price,\r\n            qty,\r\n            countInStock: data.countInStock\r\n        }\r\n    }).catch((err) => console.log(err.message));\r\n\r\n    //get from server the cartItem data and sent it to reducer\r\n    dispatch({\r\n        type: CART_APPEND_ITEM,\r\n        payload: cartItem.data\r\n    });\r\n    \r\n    //refresh the localstorage\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n};\r\n\r\n//Create another action when the user logged in it will get all the user cart items\r\nexport const requestCartItems = (userId) => async(dispatch, getState) => {\r\n\r\n    const { data } = await axios({\r\n        method: \"GET\",\r\n        url: serverUrl + CART_API_URL + `/user-cart-items/${userId}`\r\n    });\r\n\r\n\r\n    dispatch({\r\n        type: CART_REQUEST_SUCCESS,\r\n        payload: data\r\n    });\r\n\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n}\r\n\r\nexport const removeFromCart = (id) => async(dispatch, getState) => {\r\n    //remove from db\r\n    await axios({\r\n        method: \"DELETE\",\r\n        url: serverUrl + CART_API_URL + \"/remove\",\r\n        data: {\r\n            cartId: id\r\n        }\r\n    });\r\n    \r\n    //remove in redux state\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id\r\n    });\r\n\r\n    //refresh the localstorage\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n}\r\n\r\nexport const removeCartItems = () => async(dispatch) => {\r\n    dispatch({\r\n        type: REMOVE_ITEMS_SUCCESS\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}