{"ast":null,"code":"import axios from \"axios\";\nimport { USER_API_URL } from \"../constants/apiConstants\";\nimport { DELETE_PROFILE_FAIL, DELETE_PROFILE_REQUEST, DELETE_PROFILE_SUCCESS, FORGOT_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_PROFILE_FAIL, USER_PROFILE_REQUEST, USER_PROFILE_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, GET_USERS_REQUEST, GET_USERS_SUCCESS, GET_USERS_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, UPDATE_SUCCESS_RESET, DELETE_USER_REQUEST, DELETE_USER_SUCCESS, DELETE_USER_FAIL, SEND_PASSWORD_REQUEST, SEND_PASSWORD_SUCCESS, SEND_PASSWORD_FAIL, ADD_USER_REQUEST, ADD_USER_SUCCESS, ADD_USER_FAIL, ADD_USER_ERROR_RESET } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const {\n      data\n    } = await axios({\n      method: \"POST\",\n      baseURL: USER_API_URL,\n      url: \"/login\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      data: {\n        email: email,\n        password: password\n      }\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  localStorage.removeItem(\"cartItems\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password, confirmPassword) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await axios({\n      method: \"POST\",\n      baseURL: USER_API_URL,\n      url: \"/\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      data: {\n        name: name,\n        email: email,\n        password: password,\n        confirmPassword: confirmPassword\n      }\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    }); //login to user directly\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserProfile = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_PROFILE_REQUEST\n    }); //get the userInfo state\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await axios({\n      method: \"GET\",\n      baseURL: USER_API_URL,\n      url: `/${id}`,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await axios({\n      method: \"PUT\",\n      baseURL: USER_API_URL,\n      url: \"/profile\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      },\n      data: user\n    });\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.response\n    });\n  }\n};\nexport const deleteUserProfile = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: DELETE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    await axios({\n      method: \"DELETE\",\n      baseURL: USER_API_URL,\n      url: \"/profile\",\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: DELETE_PROFILE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const userForgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    await axios({\n      method: \"POST\",\n      baseURL: USER_API_URL,\n      url: \"/email\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      data: {\n        email: email\n      }\n    });\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: \"Password reset link has been sent. Please check your email.\"\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message && error.response ? error.response.data.message : error.message\n    });\n  }\n}; //ADMIN PANEL\n\nexport const getAllUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios({\n      method: \"GET\",\n      baseURL: USER_API_URL,\n      url: \"/users-tool\"\n    });\n    dispatch({\n      type: GET_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_USERS_FAIL,\n      payload: error.response.data.message && error.response ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUser = (userId, name, email, password, isAdmin) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    await axios({\n      method: \"PUT\",\n      baseURL: USER_API_URL,\n      url: \"/users-tool\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      data: {\n        userId,\n        name,\n        email,\n        password,\n        isAdmin\n      }\n    });\n    dispatch({\n      type: UPDATE_USER_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message && error.response ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateResetSuccess = () => async dispatch => {\n  dispatch({\n    type: UPDATE_SUCCESS_RESET\n  });\n};\nexport const deleteUser = userId => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_USER_REQUEST\n    });\n    await axios({\n      method: \"DELETE\",\n      baseURL: USER_API_URL,\n      url: \"/users-tool\",\n      data: {\n        userId\n      }\n    });\n    dispatch({\n      type: DELETE_USER_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL,\n      payload: error.response.data.message && error.response ? error.response.data.message : error.message\n    });\n  }\n};\nexport const sendPasswordReset = email => async dispatch => {\n  try {\n    dispatch({\n      type: SEND_PASSWORD_REQUEST\n    });\n    await axios({\n      method: \"POST\",\n      baseURL: USER_API_URL,\n      url: \"/users-tool\",\n      data: {\n        email\n      }\n    });\n    dispatch({\n      type: SEND_PASSWORD_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: SEND_PASSWORD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addNewUser = (name, email, password, isAdmin) => async dispatch => {\n  try {\n    dispatch({\n      type: ADD_USER_REQUEST\n    });\n    await axios({\n      method: \"POST\",\n      baseURL: USER_API_URL,\n      url: \"/add-user\",\n      data: {\n        name,\n        email,\n        password,\n        isAdmin\n      }\n    });\n    dispatch({\n      type: ADD_USER_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: ADD_USER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addNewUserErrorReset = () => async dispatch => {\n  dispatch({\n    type: ADD_USER_ERROR_RESET\n  });\n};","map":{"version":3,"sources":["C:/Github Repositories/cyclex/frontend/src/actions/userActions.js"],"names":["axios","USER_API_URL","DELETE_PROFILE_FAIL","DELETE_PROFILE_REQUEST","DELETE_PROFILE_SUCCESS","FORGOT_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_PROFILE_FAIL","USER_PROFILE_REQUEST","USER_PROFILE_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","GET_USERS_REQUEST","GET_USERS_SUCCESS","GET_USERS_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","UPDATE_SUCCESS_RESET","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAIL","SEND_PASSWORD_REQUEST","SEND_PASSWORD_SUCCESS","SEND_PASSWORD_FAIL","ADD_USER_REQUEST","ADD_USER_SUCCESS","ADD_USER_FAIL","ADD_USER_ERROR_RESET","login","email","password","dispatch","type","data","method","baseURL","url","headers","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","confirmPassword","getUserProfile","id","getState","userLogin","userInfo","Authorization","token","updateUserProfile","user","deleteUserProfile","userForgotPassword","getAllUsers","updateUser","userId","isAdmin","updateResetSuccess","deleteUser","sendPasswordReset","addNewUser","addNewUserErrorReset"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { USER_API_URL } from \"../constants/apiConstants\";\r\nimport { DELETE_PROFILE_FAIL, DELETE_PROFILE_REQUEST, DELETE_PROFILE_SUCCESS, FORGOT_PASSWORD_FAIL, \r\n    FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PROFILE_REQUEST, \r\n    UPDATE_PROFILE_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, \r\n    USER_PROFILE_FAIL, USER_PROFILE_REQUEST, USER_PROFILE_SUCCESS, USER_REGISTER_FAIL, \r\n    USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, GET_USERS_REQUEST, GET_USERS_SUCCESS, GET_USERS_FAIL,\r\n    UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, UPDATE_SUCCESS_RESET, DELETE_USER_REQUEST, \r\n    DELETE_USER_SUCCESS, DELETE_USER_FAIL, SEND_PASSWORD_REQUEST, SEND_PASSWORD_SUCCESS, SEND_PASSWORD_FAIL, ADD_USER_REQUEST, ADD_USER_SUCCESS, ADD_USER_FAIL, ADD_USER_ERROR_RESET} from \"../constants/userConstants\";\r\n\r\nexport const login = (email, password) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        });\r\n\r\n        const { data } = await axios({\r\n            method: \"POST\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/login\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            data: {\r\n                email: email,\r\n                password: password\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    } \r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const logout = () => async(dispatch) => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    localStorage.removeItem(\"cartItems\");\r\n\r\n    dispatch({\r\n        type: USER_LOGOUT\r\n    });\r\n};\r\n\r\nexport const register = (name, email, password, confirmPassword) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        });\r\n    \r\n        const { data } = await axios({\r\n            method: \"POST\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            data: {\r\n                name: name,\r\n                email: email,\r\n                password: password,\r\n                confirmPassword: confirmPassword\r\n            }\r\n        });\r\n    \r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n        //login to user directly\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    } \r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const getUserProfile = (id) => async(dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_PROFILE_REQUEST\r\n        });\r\n    \r\n        //get the userInfo state\r\n        const { userLogin: { userInfo } } = getState();\r\n    \r\n        const { data } = await axios({\r\n            method: \"GET\",\r\n            baseURL: USER_API_URL,\r\n            url: `/${id}`,\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        });\r\n    \r\n        dispatch({\r\n            type: USER_PROFILE_SUCCESS,\r\n            payload: data\r\n        });\r\n    }\r\n    catch(error) {\r\n        dispatch({\r\n            type: USER_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const updateUserProfile = (user) => async(dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: UPDATE_PROFILE_REQUEST\r\n        });\r\n    \r\n        const { userLogin: { userInfo } } = getState();\r\n        \r\n        const {data} = await axios({\r\n            method: \"PUT\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/profile\",\r\n            headers: {\r\n                \"Content-type\":\"application/json\",\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n            data: user\r\n        });\r\n    \r\n        dispatch({\r\n            type: UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    }\r\n    catch(error) {\r\n        dispatch({\r\n            type: UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.response\r\n        });\r\n    }\r\n};\r\n\r\nexport const deleteUserProfile = () => async(dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: DELETE_PROFILE_REQUEST\r\n        });\r\n\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        await axios({\r\n            method: \"DELETE\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/profile\",\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: DELETE_PROFILE_SUCCESS\r\n        });\r\n    } \r\n    catch(error) {\r\n        dispatch({\r\n            type: DELETE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const userForgotPassword = (email) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: FORGOT_PASSWORD_REQUEST\r\n        });\r\n\r\n        await axios({\r\n            method: \"POST\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/email\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            data: {\r\n                email: email\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: FORGOT_PASSWORD_SUCCESS,\r\n            payload: \"Password reset link has been sent. Please check your email.\"\r\n        });\r\n    }\r\n    catch(error) {\r\n        dispatch({\r\n            type: FORGOT_PASSWORD_FAIL,\r\n            payload: error.response.data.message && error.response ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}\r\n\r\n//ADMIN PANEL\r\nexport const getAllUsers = () => async(dispatch) => {\r\n    try { \r\n        dispatch({\r\n            type: GET_USERS_REQUEST\r\n        });\r\n    \r\n        const { data } = await axios({\r\n            method: \"GET\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/users-tool\"\r\n        });\r\n    \r\n        dispatch({\r\n            type: GET_USERS_SUCCESS,\r\n            payload: data\r\n        });\r\n    }\r\n    catch (error){\r\n        dispatch({\r\n            type: GET_USERS_FAIL,\r\n            payload: error.response.data.message && error.response ? error.response.data.message : error.message \r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUser = (userId, name, email, password, isAdmin) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: UPDATE_USER_REQUEST\r\n        });\r\n        \r\n        await axios({\r\n            method: \"PUT\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/users-tool\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            data: {\r\n                userId,\r\n                name, \r\n                email,\r\n                password,\r\n                isAdmin\r\n            }\r\n        });\r\n    \r\n        dispatch({\r\n            type: UPDATE_USER_SUCCESS\r\n        });\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: UPDATE_USER_FAIL,\r\n            payload: error.response.data.message && error.response ? error.response.data.message : error.message \r\n        });\r\n    }\r\n}\r\n\r\nexport const updateResetSuccess = () => async(dispatch) => {\r\n    dispatch({\r\n        type: UPDATE_SUCCESS_RESET\r\n    });\r\n}\r\n\r\nexport const deleteUser = (userId) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: DELETE_USER_REQUEST\r\n        });\r\n\r\n        await axios({\r\n            method: \"DELETE\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/users-tool\",\r\n            data: {\r\n                userId\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: DELETE_USER_SUCCESS\r\n        });\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: DELETE_USER_FAIL,\r\n            payload: error.response.data.message && error.response ? error.response.data.message : error.message \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const sendPasswordReset = (email) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: SEND_PASSWORD_REQUEST\r\n        });\r\n    \r\n        await axios({\r\n            method: \"POST\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/users-tool\",\r\n            data: {\r\n                email\r\n            }\r\n        });\r\n    \r\n        dispatch({\r\n            type: SEND_PASSWORD_SUCCESS\r\n        })\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: SEND_PASSWORD_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}\r\n\r\nexport const addNewUser = (name, email, password, isAdmin) => async(dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADD_USER_REQUEST\r\n        });\r\n    \r\n        await axios({\r\n            method: \"POST\",\r\n            baseURL: USER_API_URL,\r\n            url: \"/add-user\",\r\n            data: {\r\n                name,\r\n                email,\r\n                password,\r\n                isAdmin\r\n            }\r\n        });\r\n    \r\n        dispatch({\r\n            type: ADD_USER_SUCCESS\r\n        });\r\n    }\r\n    catch (error){\r\n        dispatch({\r\n            type: ADD_USER_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}\r\n\r\nexport const addNewUserErrorReset = () => async(dispatch) => {\r\n    dispatch({\r\n        type: ADD_USER_ERROR_RESET\r\n    });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}