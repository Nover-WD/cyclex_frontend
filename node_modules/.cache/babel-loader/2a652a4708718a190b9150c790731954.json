{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { itemListReducer, listDetailReducer } from \"./reducers/itemReducers\";\nimport { cartReducer } from \"./reducers/cartReducers\";\nimport { userLoginReducer, userRegisterReducer, userProfileReducer, updateProfileReducer, deleteProfileReducer, forgotPasswordReducer, getAllUsersReducer, updateUserReducer, deleteUserReducer, sendPasswordResetReducer, addNewUserReducer } from \"./reducers/userReducers\";\nconst reducer = combineReducers({\n  itemList: itemListReducer,\n  itemDetail: listDetailReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userProfile: userProfileReducer,\n  updateProfile: updateProfileReducer,\n  deleteProfile: deleteProfileReducer,\n  forgotPassword: forgotPasswordReducer,\n  //ADMIN PANEL\n  getAllUsers: getAllUsersReducer,\n  updateUser: updateUserReducer,\n  deleteUser: deleteUserReducer,\n  sendPasswordReset: sendPasswordResetReducer,\n  addNewUser: addNewUserReducer\n}); //cart functionality\n\n/*if cart items is existing, convert to object format else return\r\nan empty array*/\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null; //I think localStorage is for saving the item then pass in the store state\n//define initial state that are coming from Storage\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n}; //we could log our actions into redux devtools before redux passes continous\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, //wrap the data from the devtools to pass the data from the middleware to devtools\ncomposeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Github Repositories/deploy_cyclex/client/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","itemListReducer","listDetailReducer","cartReducer","userLoginReducer","userRegisterReducer","userProfileReducer","updateProfileReducer","deleteProfileReducer","forgotPasswordReducer","getAllUsersReducer","updateUserReducer","deleteUserReducer","sendPasswordResetReducer","addNewUserReducer","reducer","itemList","itemDetail","cart","userLogin","userRegister","userProfile","updateProfile","deleteProfile","forgotPassword","getAllUsers","updateUser","deleteUser","sendPasswordReset","addNewUser","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","cartItems","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA6D,OAA7D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,yBAAnD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,EAAoEC,oBAApE,EACIC,oBADJ,EAC0BC,qBAD1B,EACiDC,kBADjD,EACqEC,iBADrE,EAEIC,iBAFJ,EAEuBC,wBAFvB,EAEiDC,iBAFjD,QAE0E,yBAF1E;AAIA,MAAMC,OAAO,GAAGlB,eAAe,CAAC;AAC5BmB,EAAAA,QAAQ,EAAEf,eADkB;AAE5BgB,EAAAA,UAAU,EAAEf,iBAFgB;AAG5BgB,EAAAA,IAAI,EAAEf,WAHsB;AAI5BgB,EAAAA,SAAS,EAAEf,gBAJiB;AAK5BgB,EAAAA,YAAY,EAAEf,mBALc;AAM5BgB,EAAAA,WAAW,EAAEf,kBANe;AAO5BgB,EAAAA,aAAa,EAAEf,oBAPa;AAQ5BgB,EAAAA,aAAa,EAAEf,oBARa;AAS5BgB,EAAAA,cAAc,EAAEf,qBATY;AAU5B;AACAgB,EAAAA,WAAW,EAAEf,kBAXe;AAY5BgB,EAAAA,UAAU,EAAEf,iBAZgB;AAa5BgB,EAAAA,UAAU,EAAEf,iBAbgB;AAc5BgB,EAAAA,iBAAiB,EAAEf,wBAdS;AAe5BgB,EAAAA,UAAU,EAAEf;AAfgB,CAAD,CAA/B,C,CAkBA;;AACA;AACA;;AACA,MAAMgB,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACvBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADuB,GAEzB,EAFJ;AAIA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACtBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADsB,GACwB,IADpD,C,CAGA;AACA;;AACA,MAAMI,YAAY,GAAG;AACjBlB,EAAAA,IAAI,EAAE;AAAEmB,IAAAA,SAAS,EAAEP;AAAb,GADW;AAEjBX,EAAAA,SAAS,EAAE;AAAEmB,IAAAA,QAAQ,EAAEH;AAAZ;AAFM,CAArB,C,CAIA;;AACA,MAAMI,UAAU,GAAG,CAACxC,KAAD,CAAnB;AACA,MAAMyC,KAAK,GAAG5C,WAAW,CACrBmB,OADqB,EAErBqB,YAFqB,EAGrB;AACApC,mBAAmB,CAACF,eAAe,CAAC,GAAGyC,UAAJ,CAAhB,CAJE,CAAzB;AAOA,eAAeC,KAAf","sourcesContent":["import  {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { itemListReducer, listDetailReducer } from \"./reducers/itemReducers\";\r\nimport { cartReducer } from \"./reducers/cartReducers\";\r\nimport { userLoginReducer, userRegisterReducer, userProfileReducer, updateProfileReducer, \r\n    deleteProfileReducer, forgotPasswordReducer, getAllUsersReducer, updateUserReducer,\r\n    deleteUserReducer, sendPasswordResetReducer, addNewUserReducer } from \"./reducers/userReducers\";\r\n\r\nconst reducer = combineReducers({\r\n    itemList: itemListReducer,\r\n    itemDetail: listDetailReducer,\r\n    cart: cartReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userProfile: userProfileReducer,\r\n    updateProfile: updateProfileReducer,\r\n    deleteProfile: deleteProfileReducer,\r\n    forgotPassword: forgotPasswordReducer,\r\n    //ADMIN PANEL\r\n    getAllUsers: getAllUsersReducer,\r\n    updateUser: updateUserReducer,\r\n    deleteUser: deleteUserReducer,\r\n    sendPasswordReset: sendPasswordResetReducer,\r\n    addNewUser: addNewUserReducer\r\n});\r\n\r\n//cart functionality\r\n/*if cart items is existing, convert to object format else return\r\nan empty array*/ \r\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")\r\n    ? JSON.parse(localStorage.getItem(\"cartItems\")) :\r\n    [];\r\n\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\r\n    ? JSON.parse(localStorage.getItem(\"userInfo\")): null;\r\n\r\n//I think localStorage is for saving the item then pass in the store state\r\n//define initial state that are coming from Storage\r\nconst initialState = {\r\n    cart: { cartItems: cartItemsFromStorage },\r\n    userLogin: { userInfo: userInfoFromStorage}\r\n};\r\n//we could log our actions into redux devtools before redux passes continous\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n    reducer,\r\n    initialState,\r\n    //wrap the data from the devtools to pass the data from the middleware to devtools\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n\r\n"]},"metadata":{},"sourceType":"module"}