{"ast":null,"code":"import axios from \"axios\";\nimport { CART_APPEND_ITEM, CART_REQUEST_SUCCESS, CART_REMOVE_ITEM, REMOVE_ITEMS_SUCCESS } from \"../constants/cartConstants\";\nimport { CART_API_URL, ITEM_API_URL } from \"../constants/apiConstants\";\nconst serverUrl = \"https://cyclexbackend.adaptable.app/\";\nexport const addToCart = (id, qty, userId) => async (dispatch, getState) => {\n  //get the specific item on server\n  const {\n    data\n  } = await axios({\n    method: \"get\",\n    baseURL: ITEM_API_URL,\n    url: `/${id}`\n  }); //send the specific item to cartItems(server)\n\n  const cartItem = await axios({\n    method: \"POST\",\n    baseURL: CART_API_URL,\n    url: \"/\",\n    data: {\n      userId,\n      itemId: data._id,\n      name: data.name,\n      brand: data.brand,\n      image: data.image,\n      price: data.price,\n      qty,\n      countInStock: data.countInStock\n    }\n  }).catch(err => console.log(err.message)); //get from server the cartItem data and sent it to reducer\n\n  dispatch({\n    type: CART_APPEND_ITEM,\n    payload: cartItem.data\n  }); //refresh the localstorage\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n}; //Create another action when the user logged in it will get all the user cart items\n\nexport const requestCartItems = userId => async (dispatch, getState) => {\n  const {\n    data\n  } = await axios({\n    method: \"GET\",\n    baseURL: CART_API_URL,\n    url: `/user-cart-items/${userId}`\n  });\n  dispatch({\n    type: CART_REQUEST_SUCCESS,\n    payload: data\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n};\nexport const removeFromCart = id => async (dispatch, getState) => {\n  console.log(id); //remove from db\n\n  await axios({\n    method: \"DELETE\",\n    baseURL: CART_API_URL,\n    url: \"/remove\",\n    data: {\n      cartId: id\n    }\n  }); //remove in redux state\n\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: id\n  }); //refresh the localstorage\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n};\nexport const removeCartItems = () => async dispatch => {\n  dispatch({\n    type: REMOVE_ITEMS_SUCCESS\n  });\n};","map":{"version":3,"sources":["C:/Github Repositories/deploy-cyclex/src/actions/cartActions.js"],"names":["axios","CART_APPEND_ITEM","CART_REQUEST_SUCCESS","CART_REMOVE_ITEM","REMOVE_ITEMS_SUCCESS","CART_API_URL","ITEM_API_URL","serverUrl","addToCart","id","qty","userId","dispatch","getState","data","method","baseURL","url","cartItem","itemId","_id","name","brand","image","price","countInStock","catch","err","console","log","message","type","payload","localStorage","setItem","JSON","stringify","cart","cartItems","requestCartItems","removeFromCart","cartId","removeCartItems"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { CART_APPEND_ITEM, CART_REQUEST_SUCCESS, CART_REMOVE_ITEM, REMOVE_ITEMS_SUCCESS } from \"../constants/cartConstants\";\r\nimport { CART_API_URL, ITEM_API_URL } from \"../constants/apiConstants\";\r\n\r\nconst serverUrl = \"https://cyclexbackend.adaptable.app/\";\r\n\r\nexport const addToCart = (id, qty, userId) => async(dispatch, getState) => {\r\n    \r\n    //get the specific item on server\r\n    const {data} = await axios({\r\n        method: \"get\",\r\n        baseURL: ITEM_API_URL,\r\n        url: `/${id}` \r\n    });\r\n\r\n    //send the specific item to cartItems(server)\r\n    const cartItem = await axios({\r\n        method: \"POST\",\r\n        baseURL: CART_API_URL,\r\n        url: \"/\",\r\n        data: {\r\n            userId,\r\n            itemId: data._id,\r\n            name: data.name,\r\n            brand: data.brand,\r\n            image: data.image,\r\n            price: data.price,\r\n            qty,\r\n            countInStock: data.countInStock\r\n        }\r\n    }).catch((err) => console.log(err.message));\r\n\r\n    //get from server the cartItem data and sent it to reducer\r\n    dispatch({\r\n        type: CART_APPEND_ITEM,\r\n        payload: cartItem.data\r\n    });\r\n    \r\n    //refresh the localstorage\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n};\r\n\r\n//Create another action when the user logged in it will get all the user cart items\r\nexport const requestCartItems = (userId) => async(dispatch, getState) => {\r\n\r\n    const { data } = await axios({\r\n        method: \"GET\",\r\n        baseURL: CART_API_URL,\r\n        url: `/user-cart-items/${userId}`\r\n    });\r\n\r\n\r\n    dispatch({\r\n        type: CART_REQUEST_SUCCESS,\r\n        payload: data\r\n    });\r\n\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n}\r\n\r\nexport const removeFromCart = (id) => async(dispatch, getState) => {\r\n    console.log(id);\r\n    //remove from db\r\n    await axios({\r\n        method: \"DELETE\",\r\n        baseURL: CART_API_URL,\r\n        url: \"/remove\",\r\n        data: {\r\n            cartId: id\r\n        }\r\n    });\r\n    \r\n    //remove in redux state\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id\r\n    });\r\n\r\n    //refresh the localstorage\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n}\r\n\r\nexport const removeCartItems = () => async(dispatch) => {\r\n    dispatch({\r\n        type: REMOVE_ITEMS_SUCCESS\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}