{"ast":null,"code":"import _regeneratorRuntime from\"C:/Github Repositories/deploy_cyclex/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Github Repositories/deploy_cyclex/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";import{CART_APPEND_ITEM,CART_REQUEST_SUCCESS,CART_REMOVE_ITEM,REMOVE_ITEMS_SUCCESS}from\"../constants/cartConstants\";import{CART_API_URL,ITEM_API_URL}from\"../constants/apiConstants\";export var addToCart=function addToCart(id,qty,userId){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var _yield$axios,data,cartItem;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios({method:\"get\",baseURL:ITEM_API_URL,url:\"/\".concat(id)});case 2:_yield$axios=_context.sent;data=_yield$axios.data;_context.next=6;return axios({method:\"POST\",baseURL:CART_API_URL,url:\"/\",data:{userId:userId,itemId:data._id,name:data.name,brand:data.brand,image:data.image,price:data.price,qty:qty,countInStock:data.countInStock}}).catch(function(err){return console.log(err.message);});case 6:cartItem=_context.sent;//get from server the cartItem data and sent it to reducer\ndispatch({type:CART_APPEND_ITEM,payload:cartItem.data});//refresh the localstorage\nlocalStorage.setItem(\"cartItems\",JSON.stringify(getState().cart.cartItems));case 9:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};//Create another action when the user logged in it will get all the user cart items\nexport var requestCartItems=function requestCartItems(userId){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var _yield$axios2,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return axios({method:\"GET\",baseURL:CART_API_URL,url:\"/user-cart-items/\".concat(userId)});case 2:_yield$axios2=_context2.sent;data=_yield$axios2.data;dispatch({type:CART_REQUEST_SUCCESS,payload:data});localStorage.setItem(\"cartItems\",JSON.stringify(getState().cart.cartItems));case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}();};export var removeFromCart=function removeFromCart(id){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(id);//remove from db\n_context3.next=3;return axios({method:\"DELETE\",baseURL:CART_API_URL,url:\"/remove\",data:{cartId:id}});case 3://remove in redux state\ndispatch({type:CART_REMOVE_ITEM,payload:id});//refresh the localstorage\nlocalStorage.setItem(\"cartItems\",JSON.stringify(getState().cart.cartItems));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x5,_x6){return _ref3.apply(this,arguments);};}();};export var removeCartItems=function removeCartItems(){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dispatch({type:REMOVE_ITEMS_SUCCESS});case 1:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x7){return _ref4.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Github Repositories/deploy_cyclex/client/src/actions/cartActions.js"],"names":["axios","CART_APPEND_ITEM","CART_REQUEST_SUCCESS","CART_REMOVE_ITEM","REMOVE_ITEMS_SUCCESS","CART_API_URL","ITEM_API_URL","addToCart","id","qty","userId","dispatch","getState","method","baseURL","url","data","itemId","_id","name","brand","image","price","countInStock","catch","err","console","log","message","cartItem","type","payload","localStorage","setItem","JSON","stringify","cart","cartItems","requestCartItems","removeFromCart","cartId","removeCartItems"],"mappings":"yPAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,gBAAT,CAA2BC,oBAA3B,CAAiDC,gBAAjD,CAAmEC,oBAAnE,KAA+F,4BAA/F,CACA,OAASC,YAAT,CAAuBC,YAAvB,KAA2C,2BAA3C,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,EAAD,CAAKC,GAAL,CAAUC,MAAV,iGAAqB,iBAAMC,QAAN,CAAgBC,QAAhB,uKAGrBZ,CAAAA,KAAK,CAAC,CACvBa,MAAM,CAAE,KADe,CAEvBC,OAAO,CAAER,YAFc,CAGvBS,GAAG,YAAMP,EAAN,CAHoB,CAAD,CAHgB,mCAGnCQ,IAHmC,cAGnCA,IAHmC,uBAUnBhB,CAAAA,KAAK,CAAC,CACzBa,MAAM,CAAE,MADiB,CAEzBC,OAAO,CAAET,YAFgB,CAGzBU,GAAG,CAAE,GAHoB,CAIzBC,IAAI,CAAE,CACFN,MAAM,CAANA,MADE,CAEFO,MAAM,CAAED,IAAI,CAACE,GAFX,CAGFC,IAAI,CAAEH,IAAI,CAACG,IAHT,CAIFC,KAAK,CAAEJ,IAAI,CAACI,KAJV,CAKFC,KAAK,CAAEL,IAAI,CAACK,KALV,CAMFC,KAAK,CAAEN,IAAI,CAACM,KANV,CAOFb,GAAG,CAAHA,GAPE,CAQFc,YAAY,CAAEP,IAAI,CAACO,YARjB,CAJmB,CAAD,CAAL,CAcpBC,KAdoB,CAcd,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAAT,EAdc,CAVmB,QAUpCC,QAVoC,eA0B1C;AACAlB,QAAQ,CAAC,CACLmB,IAAI,CAAE7B,gBADD,CAEL8B,OAAO,CAAEF,QAAQ,CAACb,IAFb,CAAD,CAAR,CAKA;AACAgB,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCC,IAAI,CAACC,SAAL,CAAevB,QAAQ,GAAGwB,IAAX,CAAgBC,SAA/B,CAAlC,EAjC0C,sDAArB,oEAAlB,CAoCP;AACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAC5B,MAAD,kGAAY,kBAAMC,QAAN,CAAgBC,QAAhB,oKAEjBZ,CAAAA,KAAK,CAAC,CACzBa,MAAM,CAAE,KADiB,CAEzBC,OAAO,CAAET,YAFgB,CAGzBU,GAAG,4BAAsBL,MAAtB,CAHsB,CAAD,CAFY,qCAEhCM,IAFgC,eAEhCA,IAFgC,CASxCL,QAAQ,CAAC,CACLmB,IAAI,CAAE5B,oBADD,CAEL6B,OAAO,CAAEf,IAFJ,CAAD,CAAR,CAKAgB,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCC,IAAI,CAACC,SAAL,CAAevB,QAAQ,GAAGwB,IAAX,CAAgBC,SAA/B,CAAlC,EAdwC,wDAAZ,sEAAzB,CAiBP,MAAO,IAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAC/B,EAAD,kGAAQ,kBAAMG,QAAN,CAAgBC,QAAhB,sHAClCc,OAAO,CAACC,GAAR,CAAYnB,EAAZ,EACA;AAFkC,uBAG5BR,CAAAA,KAAK,CAAC,CACRa,MAAM,CAAE,QADA,CAERC,OAAO,CAAET,YAFD,CAGRU,GAAG,CAAE,SAHG,CAIRC,IAAI,CAAE,CACFwB,MAAM,CAAEhC,EADN,CAJE,CAAD,CAHuB,QAYlC;AACAG,QAAQ,CAAC,CACLmB,IAAI,CAAE3B,gBADD,CAEL4B,OAAO,CAAEvB,EAFJ,CAAD,CAAR,CAKA;AACAwB,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCC,IAAI,CAACC,SAAL,CAAevB,QAAQ,GAAGwB,IAAX,CAAgBC,SAA/B,CAAlC,EAnBkC,wDAAR,sEAAvB,CAsBP,MAAO,IAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,mGAAM,kBAAM9B,QAAN,sHACjCA,QAAQ,CAAC,CACLmB,IAAI,CAAE1B,oBADD,CAAD,CAAR,CADiC,wDAAN,kEAAxB","sourcesContent":["import axios from \"axios\";\r\nimport { CART_APPEND_ITEM, CART_REQUEST_SUCCESS, CART_REMOVE_ITEM, REMOVE_ITEMS_SUCCESS } from \"../constants/cartConstants\";\r\nimport { CART_API_URL, ITEM_API_URL } from \"../constants/apiConstants\";\r\n\r\nexport const addToCart = (id, qty, userId) => async(dispatch, getState) => {\r\n    \r\n    //get the specific item on server\r\n    const {data} = await axios({\r\n        method: \"get\",\r\n        baseURL: ITEM_API_URL,\r\n        url: `/${id}` \r\n    });\r\n\r\n    //send the specific item to cartItems(server)\r\n    const cartItem = await axios({\r\n        method: \"POST\",\r\n        baseURL: CART_API_URL,\r\n        url: \"/\",\r\n        data: {\r\n            userId,\r\n            itemId: data._id,\r\n            name: data.name,\r\n            brand: data.brand,\r\n            image: data.image,\r\n            price: data.price,\r\n            qty,\r\n            countInStock: data.countInStock\r\n        }\r\n    }).catch((err) => console.log(err.message));\r\n\r\n    //get from server the cartItem data and sent it to reducer\r\n    dispatch({\r\n        type: CART_APPEND_ITEM,\r\n        payload: cartItem.data\r\n    });\r\n    \r\n    //refresh the localstorage\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n};\r\n\r\n//Create another action when the user logged in it will get all the user cart items\r\nexport const requestCartItems = (userId) => async(dispatch, getState) => {\r\n\r\n    const { data } = await axios({\r\n        method: \"GET\",\r\n        baseURL: CART_API_URL,\r\n        url: `/user-cart-items/${userId}`\r\n    });\r\n\r\n\r\n    dispatch({\r\n        type: CART_REQUEST_SUCCESS,\r\n        payload: data\r\n    });\r\n\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n}\r\n\r\nexport const removeFromCart = (id) => async(dispatch, getState) => {\r\n    console.log(id);\r\n    //remove from db\r\n    await axios({\r\n        method: \"DELETE\",\r\n        baseURL: CART_API_URL,\r\n        url: \"/remove\",\r\n        data: {\r\n            cartId: id\r\n        }\r\n    });\r\n    \r\n    //remove in redux state\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id\r\n    });\r\n\r\n    //refresh the localstorage\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\r\n}\r\n\r\nexport const removeCartItems = () => async(dispatch) => {\r\n    dispatch({\r\n        type: REMOVE_ITEMS_SUCCESS\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}