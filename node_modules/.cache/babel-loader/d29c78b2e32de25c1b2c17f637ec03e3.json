{"ast":null,"code":"import { ITEM_LIST_REQUEST, ITEM_LIST_SUCCESS, ITEM_LIST_FAIL, ITEM_DETAIL_REQUEST, ITEM_DETAIL_SUCESS, ITEM_DETAIL_FAIL } from \"../constants/itemConstants.js\";\nimport { ITEM_API_URL } from \"../constants/apiConstants\";\nimport axios from \"axios\";\nexport const listItems = () => async dispatch => {\n  try {\n    //this is for logging purposes to let us know when debugging our code that we are about to start requesting the Item List from the backend\n    dispatch({\n      type: ITEM_LIST_REQUEST\n    }); //get the item list from the backend(api call)\n\n    const {\n      data\n    } = await axios({\n      method: \"get\",\n      baseURL: ITEM_API_URL,\n      url: \"https://cyclexfrontend.netlify.app/\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://example.com\",\n        \"Access-Control-Allow-Methods\": \"POST, PUT, PATCH, GET, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Origin, X-Api-Key, X-Requested-With, Content-Type, Accept, Authorization\"\n      }\n    });\n    dispatch({\n      type: ITEM_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ITEM_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listItemDetail = id => async dispatch => {\n  try {\n    dispatch({\n      type: ITEM_DETAIL_REQUEST\n    }); //get the data from backend(api call)\n\n    const {\n      data\n    } = await axios({\n      method: \"get\",\n      baseURL: ITEM_API_URL,\n      url: `/${id}` //get the id from url route params\n\n    }); //pass the data and pass to reducer\n\n    dispatch({\n      type: ITEM_DETAIL_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ITEM_DETAIL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Github Repositories/deploy-cyclex/src/actions/itemActions.js"],"names":["ITEM_LIST_REQUEST","ITEM_LIST_SUCCESS","ITEM_LIST_FAIL","ITEM_DETAIL_REQUEST","ITEM_DETAIL_SUCESS","ITEM_DETAIL_FAIL","ITEM_API_URL","axios","listItems","dispatch","type","data","method","baseURL","url","headers","payload","error","response","message","listItemDetail","id"],"mappings":"AAAA,SACIA,iBADJ,EAEIC,iBAFJ,EAGIC,cAHJ,EAIIC,mBAJJ,EAKIC,kBALJ,EAMIC,gBANJ,QAOO,+BAPP;AAQA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAMC,QAAN,IAAmB;AAC9C,MAAI;AACA;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR,CAFA,CAIA;;AACA,UAAM;AAACW,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAAC;AACvBK,MAAAA,MAAM,EAAE,KADe;AAEvBC,MAAAA,OAAO,EAAEP,YAFc;AAGvBQ,MAAAA,GAAG,EAAE,qCAHkB;AAIvBC,MAAAA,OAAO,EAAE;AACL,uCAA+B,oBAD1B;AAEL,wCAAgC,wCAF3B;AAGL,wCAAgC;AAH3B;AAJc,KAAD,CAA1B;AAWAN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,iBADD;AAELe,MAAAA,OAAO,EAAEL;AAFJ,KAAD,CAAR;AAIH,GApBD,CAqBA,OAAOM,KAAP,EAAc;AACVR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,cADD;AAELc,MAAAA,OAAO,EACHC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeP,IAAf,CAAoBQ,OAAtC,GACEF,KAAK,CAACC,QAAN,CAAeP,IAAf,CAAoBQ,OADtB,GACgCF,KAAK,CAACE;AAJrC,KAAD,CAAR;AAMH;AACJ,CA9BM;AAgCP,OAAO,MAAMC,cAAc,GAAIC,EAAD,IAAQ,MAAMZ,QAAN,IAAmB;AACrD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR,CADA,CAGA;;AACA,UAAM;AAACQ,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAAC;AACvBK,MAAAA,MAAM,EAAE,KADe;AAEvBC,MAAAA,OAAO,EAAEP,YAFc;AAGvBQ,MAAAA,GAAG,EAAG,IAAGO,EAAG,EAHW,CAGT;;AAHS,KAAD,CAA1B,CAJA,CAUA;;AACAZ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,kBADD;AAELY,MAAAA,OAAO,EAAEL;AAFJ,KAAD,CAAR;AAIH,GAfD,CAgBA,OAAOM,KAAP,EAAc;AACVR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,gBADD;AAELW,MAAAA,OAAO,EACHC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeP,IAAf,CAAoBQ,OAAtC,GACEF,KAAK,CAACC,QAAN,CAAeP,IAAf,CAAoBQ,OADtB,GACgCF,KAAK,CAACE;AAJrC,KAAD,CAAR;AAMH;AACJ,CAzBM","sourcesContent":["import {\r\n    ITEM_LIST_REQUEST,\r\n    ITEM_LIST_SUCCESS,\r\n    ITEM_LIST_FAIL,\r\n    ITEM_DETAIL_REQUEST,\r\n    ITEM_DETAIL_SUCESS,\r\n    ITEM_DETAIL_FAIL\r\n} from \"../constants/itemConstants.js\";\r\nimport { ITEM_API_URL } from \"../constants/apiConstants\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const listItems = () => async(dispatch) => {\r\n    try {\r\n        //this is for logging purposes to let us know when debugging our code that we are about to start requesting the Item List from the backend\r\n        dispatch({ type: ITEM_LIST_REQUEST });\r\n\r\n        //get the item list from the backend(api call)\r\n        const {data} = await axios({\r\n            method: \"get\",\r\n            baseURL: ITEM_API_URL,\r\n            url: \"https://cyclexfrontend.netlify.app/\",\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"http://example.com\",\r\n                \"Access-Control-Allow-Methods\": \"POST, PUT, PATCH, GET, DELETE, OPTIONS\",\r\n                \"Access-Control-Allow-Headers\": \"Origin, X-Api-Key, X-Requested-With, Content-Type, Accept, Authorization\"\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: ITEM_LIST_SUCCESS,\r\n            payload: data\r\n        });\r\n    } \r\n    catch (error) {\r\n        dispatch({\r\n            type: ITEM_LIST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                ? error.response.data.message : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const listItemDetail = (id) => async(dispatch) => {\r\n    try {\r\n        dispatch({ type: ITEM_DETAIL_REQUEST});\r\n        \r\n        //get the data from backend(api call)\r\n        const {data} = await axios({\r\n            method: \"get\",\r\n            baseURL: ITEM_API_URL,\r\n            url: `/${id}` //get the id from url route params\r\n        });\r\n\r\n        //pass the data and pass to reducer\r\n        dispatch({\r\n            type: ITEM_DETAIL_SUCESS, \r\n            payload: data\r\n        })\r\n    } \r\n    catch (error) {\r\n        dispatch({\r\n            type: ITEM_DETAIL_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message \r\n                ? error.response.data.message : error.message\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}